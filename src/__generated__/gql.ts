/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n\t\t#graphql\n\t\tquery SearchFormQueryGetPostsBySearch(\n\t\t\t$search: String\n\t\t) {\n\t\t\tcategories(first: 10, where: { search: $search }) {\n\t\t\t\tnodes {\n\t\t\t\t\tname\n\t\t\t\t\turi\n\t\t\t\t}\n\t\t\t\tpageInfo {\n\t\t\t\t\tendCursor\n\t\t\t\t\thasNextPage\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t": types.SearchFormQueryGetPostsBySearchDocument,
    "\n  query GetMenuSideBar {\n    sidebarMenuItems: menuItems(where: { location: MAIN_MENU }, first: 40) {\n      nodes {\n        ...NcSideBarMenuFieldsFragment\n      }\n    }\n  }\n": types.GetMenuSideBarDocument,
    "mutation myMutationUpdatePostToPublishOrPending($id: ID = \"\", $status: PostStatusEnum ) {\n      updatePost(input: {id: $id, status: $status}) {\n        clientMutationId\n      }\n    }": types.MyMutationUpdatePostToPublishOrPendingDocument,
    "\n  query TestQuery {\n    generalSettings {\n      title\n      description\n    }\n  }\n": types.TestQueryDocument,
    "\n\tfragment NcgeneralSettingsFieldsFragment on GeneralSettings {\n      __typename\n      description\n      title\n\t}\n": types.NcgeneralSettingsFieldsFragmentFragmentDoc,
    "\n\tfragment NcmazFcTagShortFieldsFragment on Tag {\n\t\t__typename\n\t\tname\n\t\turi\n\t\tdatabaseId\n\t\tcount\n\t}\n": types.NcmazFcTagShortFieldsFragmentFragmentDoc,
    "\n\tfragment NcmazFcTagFullFieldsFragment on Tag {\n\t\t...NcmazFcTagShortFieldsFragment\n\t\tdescription\n\t\tcount\n\t}\n": types.NcmazFcTagFullFieldsFragmentFragmentDoc,
    "\n\tfragment NcmazFcCategoryFullFieldsFragment on Category {\n\t  __typename\n\t  id\n\t  databaseId\n\t  description\n\t  name\n\t  uri\n\t  count\n\t  seo {\n\t\t\tmetaDesc\n\t\t\tmetaKeywords\n\t\t\ttitle\n\t  }\n\t  ancestors {\n\t \tnodes {\n\t\t\tid\n\t\t\tname\n\t\t\turi\n\t\t}\n\t  }\n\t  children {\n\t\tnodes {\n\t\t\tname\n\t\t\turi\n\t\t\t... on Category {\n\t\t\t\tposts (first: 6) {\n\t\t\t\t\tnodes {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\turi\n\t\t\t\t\t\tfeaturedImage {\n\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\tsourceUrl\n\t\t\t\t\t\t\t\taltText\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n      }\n\t  ncTaxonomyMeta {\n\t\tcolor\n\t\tfeaturedImage {\n\t\t  node {\n\t\t\t...NcmazFcImageFields\n\t\t  }\n\t\t}\n\t  }\n\t}\n  ": types.NcmazFcCategoryFullFieldsFragmentFragmentDoc,
    "\n\tfragment NcmazFcCategoryCardFieldsNotImage on Category {\n\t\t__typename\n\t\tname\n\t\turi\n\t\tcount\n\t\tdatabaseId\n\t\tparentDatabaseId\n\t\tposts (first: 10) {\n\t\t\tnodes {\n\t\t\t\t...GetPostFields\n\t\t\t}\n\t\t}\n\t}\n": types.NcmazFcCategoryCardFieldsNotImageFragmentDoc,
    "\n\tfragment GetPostFields on Post {\n\t\ttitle\n\t\turi\n\t\tdate\n\t\tcontent\n\t\tauthor {\n\t\t\tnode {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t}\n\t\t}\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\t...NcmazFcImageHasDetailFields\n\t\t\t}\n\t\t}\n\t}\n": types.GetPostFieldsFragmentDoc,
    "\n\tfragment NcmazFcPostFormatShortFieldsFragment on PostFormat {\n\t\t__typename\n\t\tname\n\t\turi\n\t\tdatabaseId\n\t\tcount\n\t}\n": types.NcmazFcPostFormatShortFieldsFragmentFragmentDoc,
    "\n\tfragment NcmazFcPostFormatFullFieldsFragment on PostFormat {\n\t\t...NcmazFcPostFormatShortFieldsFragment\n\t\tdescription\n\t\tcount\n\t}\n": types.NcmazFcPostFormatFullFieldsFragmentFragmentDoc,
    "\n\tfragment NcmazFcPostFullFields on Post {\n\t\t__typename\n\t\turi\n\t\tdate\n\t\tstatus\n\t\texcerpt\n\t\tdatabaseId\n\t\ttitle\n\t\tamazonShortcode {\n\t\t\tamazonShortcode\n\t\t}\n\t\tnumberOfToplist {\n\t\t\tnumberOfToplist\n\t\t}\n\t\tcontent\n\t\tseo {\n\t\t\tmetaDesc\n\t\t\tmetaKeywords\n\t\t\ttitle\n\t\t\tmetaRobotsNoindex\n\t\t}\n\t\tauthor {\n\t\t\tnode {\n\t\t\t\tdescription\n\t\t\t\t...NcmazFcUserShortForPostCardFragment\n\t\t\t}\n\t\t}\n\t\tcategories {\n\t\t\tnodes {\n\t\t\t\t...NcmazFcCategoryCardFieldsNotImage\n\t\t\t}\n\t\t}\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\t...NcmazFcImageHasDetailFields\n\t\t\t}\n\t\t}\n\t}\n": types.NcmazFcPostFullFieldsFragmentDoc,
    "\n\tfragment ChildCategoryPosts on Post {\n\t\ttitle\n\t\turi\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\taltText\n\t\t\t\tsourceUrl\n\t\t\t}\n\t\t}\n\t}\n": types.ChildCategoryPostsFragmentDoc,
    "\n\tfragment NcmazFcPostCardFields on Post {\n\t\t...NcmazFcPostCardFieldsNOTNcmazGalleryImgs\n\t}\n": types.NcmazFcPostCardFieldsFragmentDoc,
    "\n\tfragment NcmazFcPostCardFieldsNOTNcmazGalleryImgs on Post {\n\t\t__typename\n\t\tdatabaseId\n\t\ttitle\n\t\turi\n\t\tstatus\n\t\tmodified\n\t\tdate\n\t\texcerpt\n\t\tauthor {\n\t\t\tnode {\n\t\t\t\t...NcmazFcUserShortForPostCardFragment\n\t\t\t}\n\t\t}\n\t\tcategories {\n\t\t\tnodes {\n\t\t\t\t...NcmazFcCategoryCardFieldsNotImage\n\t\t\t}\n\t\t}\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\t...NcmazFcImageFields\n\t\t\t}\n\t\t}\n\t}\n": types.NcmazFcPostCardFieldsNotNcmazGalleryImgsFragmentDoc,
    "\n\tfragment PostCardFieldsNOTNcmazMEDIA on Post {\n\t\t__typename\n\t\tdatabaseId\n\t\ttitle\n\t\turi\n\t\tstatus\n\t\tmodified\n\t\tdate\n\t\texcerpt\n\t\tauthor {\n\t\t\tnode {\n\t\t\t\t...NcmazFcUserShortForPostCardFragment\n\t\t\t}\n\t\t}\n\t\tcategories {\n\t\t\tnodes {\n\t\t\t\t...NcmazFcCategoryCardFieldsNotImage\n\t\t\t}\n\t\t}\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\t...NcmazFcImageFields\n\t\t\t}\n\t\t}\n\t}\n": types.PostCardFieldsNotNcmazMediaFragmentDoc,
    "\n\tfragment NcmazFcImageFields on MediaItem {\n\t\t__typename\n\t\taltText\n\t\tdatabaseId\n\t\tsourceUrl\n\t}\n": types.NcmazFcImageFieldsFragmentDoc,
    "\n\tfragment NcmazFcImageHasDetailFields on MediaItem {\n\t\t__typename\n\t\taltText\n\t\tdatabaseId\n\t\tsourceUrl\n\t}\n": types.NcmazFcImageHasDetailFieldsFragmentDoc,
    "\n\tfragment NcmazFcPostMetaFields on NcPostMetaData {\n\t\t__typename\n\t\tviewsCount\n\t\treadingTime\n\t\tlikesCount\n\t}\n": types.NcmazFcPostMetaFieldsFragmentDoc,
    "\n\tfragment NcmazFcPostMetaFullFields on NcPostMetaData {\n\t\t__typename\n\t\tviewsCount\n\t\treadingTime\n\t\tlikesCount\n\t\tsavedsCount\n\t\tshowRightSidebar\n\t\ttemplate\n\t}\n": types.NcmazFcPostMetaFullFieldsFragmentDoc,
    "\n\tfragment NcmazFcUserShortForPostCardFragment on User {\n\t\tdatabaseId\n\t\turi\n\t\tusername\n\t\tname\n\t\tncUserMeta {\n\t\t\tcolor\n\t\t\tfacebookUrl\n\t\t\tinstagramUrl\n\t\t\tlinkedinUrl\n\t\t\tncBio\n\t\t\tpinterestUrl\n\t\t\ttwitterUrl\n\t\t\tyoutubeUrl\n\t\t\ttiktokUrl\n\t\t\tfeaturedImage {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t\tbackgroundImage {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdescription\n\t\texpert {\n\t\t\tareasOfExpertise\n\t\t}\n\t}\n": types.NcmazFcUserShortForPostCardFragmentFragmentDoc,
    "\n\tfragment NcmazFcUserFullFields on User {\n\t\tid\n\t\tdatabaseId\n\t\turi\n\t\tusername\n\t\tname\n\t\tdescription\n\t\texpert {\n\t\t\tareasOfExpertise\n\t\t}\n\t\tncUserMeta {\n\t\t\tcolor\n\t\t\tfacebookUrl\n\t\t\tgithubUrl\n\t\t\tlinkedinUrl\n\t\t\tncBio\n\t\t\tpinterestUrl\n\t\t\ttwitterUrl\n\t\t\tyoutubeUrl\n\t\t\ttiktokUrl\n\t\t\tfeaturedImage {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t\tbackgroundImage {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n": types.NcmazFcUserFullFieldsFragmentDoc,
    "\n    fragment NcPrimaryMenuFieldsFragment on MenuItem {  \n        id  \n        uri\n        path  \n        label\n        parentId\n        databaseId\n    }\n": types.NcPrimaryMenuFieldsFragmentFragmentDoc,
    "\nfragment NcFooterMenuFieldsFragment on MenuItem {\n      databaseId\n      uri\n      label\n      parentId\n      databaseId\n      id\n}\n": types.NcFooterMenuFieldsFragmentFragmentDoc,
    "\n    fragment NcSideBarMenuFieldsFragment on MenuItem {\n          databaseId\n          uri\n          label\n          parentId\n          databaseId\n          id\n    }\n": types.NcSideBarMenuFieldsFragmentFragmentDoc,
    "\n    fragment NcCategoryFieldsFragment on MenuItem {\n          databaseId\n          uri\n          label\n          parentId\n          databaseId\n          id\n          menuAddons {\n            menuIcon\n            trending\n          }\n    }\n": types.NcCategoryFieldsFragmentFragmentDoc,
    "#graphql\n  query MyQueryGetCMSUser($id: ID!) {\n    user(id: $id, idType: DATABASE_ID) {\n      databaseId\n      ncUserMeta {\n        ncBio\n        featuredImage {\n            node {\n              ...NcmazFcImageFields\n            }\n          }\n      }\n    }\n  }\n": types.MyQueryGetCmsUserDocument,
    "\n  query QueryGetPostsBy(\n    $in: [ID] = null\n    $first: Int = 20\n    $after: String = null\n    $author: Int = null\n    $categoryId: Int = null\n    $categoryName: String = null\n    $tagId: String = null\n    $day: Int = null\n    $month: Int = null\n    $year: Int = null\n    $search: String = \"\"\n    $field: PostObjectsConnectionOrderbyEnum = DATE\n    $order: OrderEnum = DESC\n  ) {\n    posts(\n      first: $first\n      after: $after\n      where: {\n        in: $in\n        author: $author\n        categoryId: $categoryId\n        categoryName: $categoryName\n        tagId: $tagId\n        dateQuery: { day: $day, month: $month, year: $year }\n        search: $search\n        orderby: { field: $field, order: $order }\n      }\n    ) {\n      nodes {\n        ...NcmazFcPostCardFields\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.QueryGetPostsByDocument,
    "\n  query QueryGet10Categories($first: Int = 10) {\n    categories(first: $first, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n  }\n": types.QueryGet10CategoriesDocument,
    "\n  query QueryGetCategories($after: String, $first: Int = 10) {\n    categories(first: $first, after: $after) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.QueryGetCategoriesDocument,
    "\n  query QueryGetTags($after: String = \"\", $first: Int = 5) {\n    tags(first: $first, after: $after) {\n      nodes {\n        __typename\n        ...NcmazFcTagShortFieldsFragment\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.QueryGetTagsDocument,
    "\n  query GetReadingListData($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location: $headerLocation }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # thêm truy vấn để lấy danh mục cha\n    categories(where: { parent: null }, first: 50) {\n      nodes {\n        id\n        name\n        slug\n        ... on Category {\n          children {\n            nodes {\n              id\n              name\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetReadingListDataDocument,
    "\n  query GetReadingListPage($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location: $headerLocation }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n": types.GetReadingListPageDocument,
    "\n  query GetAuthorWithPosts($id: ID!, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    user(id: $id, idType: SLUG) {\n      ...NcmazFcUserFullFields\n      posts(first:  12, where: {orderby: {field: DATE, order: DESC}}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n      }\n    }\n    # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 15) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 20) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }\n": types.GetAuthorWithPostsDocument,
    "\n    query GetReadingListData($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n      # common query for all page \n      generalSettings {\n        ...NcgeneralSettingsFieldsFragment\n      }\n      primaryMenuItems: menuItems(where: { location: $headerLocation }, first: 80) {\n        nodes {\n          ...NcPrimaryMenuFieldsFragment\n        }\n      }\n      footerMenuItems: menuItems(where: { location: $footerLocation }, first: 50) {\n        nodes {\n          ...NcFooterMenuFieldsFragment\n        }\n      }\n      # thêm truy vấn để lấy danh mục cha\n      categories(where: { parent: null }, first: 50) {\n        nodes {\n          id\n          name\n          slug\n          ... on Category {\n            children {\n              nodes {\n                id\n                name\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  ": types.GetReadingListDataDocument,
    "\n  query GetCategories {\n    categoryItems: menuItems(where: { location: CATEGORIES }, first: 200) {\n      nodes {\n        ...NcCategoryFieldsFragment\n      }\n    }\n  }\n": types.GetCategoriesDocument,
    "\n  query GetReadingListData($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location: $headerLocation }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    categories(where: { parent: null }, first: 50) {\n      nodes {\n        id\n        name\n        slug\n        ... on Category {\n          children {\n            nodes {\n              id\n              name\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetReadingListDataDocument,
    "\n  query GetReadingListPage($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n": types.GetReadingListPageDocument,
    "\n  query SearchPostsBySearch($search: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    posts(first: 10, where: {search: $search}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n      categories(first: 10, where: { search: $search, orderby: COUNT, order: DESC }) {\n    nodes {\n      ...NcmazFcCategoryFullFieldsFragment\n    }\n  }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 80) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n": types.SearchPostsBySearchDocument,
    " \n      query queryGetUsersBySearchOnSearchPage(\n        $first: Int\n        $search: String\n        $after: String\n      ) {\n        users(first: $first, after: $after, where: { search: $search }) {\n          nodes {\n            ...NcmazFcUserFullFields\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    ": types.QueryGetUsersBySearchOnSearchPageDocument,
    "\n  query SearchPageQueryGetUsersBySearch ( $first: Int,  $search: String = \"\", $after: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum! )  {\n    users(first: $first, after: $after, where: {search: $search}) {\n        nodes {\n             ...NcmazFcUserFullFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n   # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n": types.SearchPageQueryGetUsersBySearchDocument,
    " \n      query queryGetCategoriesBySearchOnSearchPage(\n        $first: Int\n        $search: String = \"\"\n        $after: String\n      ) {\n        categories(first: $first, after: $after, where: { search: $search}) {\n          nodes {\n            ...NcmazFcCategoryFullFieldsFragment\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    ": types.QueryGetCategoriesBySearchOnSearchPageDocument,
    "\n  query SearchPageQueryGetCategoriesBySearch ( $first: Int,  $search: String = \"\", $after: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum! )  {\n    categories (first: $first, after: $after, where: {search: $search, }) {\n        nodes {\n             ...NcmazFcCategoryFullFieldsFragment\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n    }\n   \n   # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n": types.SearchPageQueryGetCategoriesBySearchDocument,
    "\n  query SearchPageQueryGetPostsBySearch( $first: Int,  $search: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    posts(first: $first, where: {search: $search}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n      categories(first:10, where: { orderby: COUNT, order: DESC }) {\n        nodes {\n          ...NcmazFcCategoryFullFieldsFragment\n        }\n      }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 80) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n": types.SearchPageQueryGetPostsBySearchDocument,
    "\n\tquery SitemapQuery2($after: String) {\n\t\tcontentNodes(\n\t\t\twhere: { contentTypes: [POST] }\n\t\t\tfirst: 50\n\t\t\tafter: $after\n\t\t) {\n\t\t\tpageInfo {\n\t\t\t\thasNextPage\n\t\t\t\tendCursor\n\t\t\t}\n\t\t\tnodes {\n\t\t\t\turi\n\t\t\t\tmodifiedGmt\n\t\t\t}\n\t\t}\n\t}\n": types.SitemapQuery2Document,
    "\n\tquery SitemapQuery($after: String) {\n\t\tcontentNodes(\n\t\t\twhere: { contentTypes: [PAGE] }\n\t\t\tfirst: 50\n\t\t\tafter: $after\n\t\t) {\n\t\t\tpageInfo {\n\t\t\t\thasNextPage\n\t\t\t\tendCursor\n\t\t\t}\n\t\t\tnodes {\n\t\t\t\turi\n\t\t\t\tmodifiedGmt\n\t\t\t}\n\t\t}\n\t}\n": types.SitemapQueryDocument,
    "\n    fragment CoreColumnFragment on CoreColumn {\n      attributes {\n        style\n        className\n        cssClassName\n      }\n    }\n  ": types.CoreColumnFragmentFragmentDoc,
    "\n    fragment CoreColumnsFragment on CoreColumns {\n      attributes {\n        style\n        className\n        cssClassName\n      }\n    }\n  ": types.CoreColumnsFragmentFragmentDoc,
    "\n\t\tfragment NcmazFaustBlockCtaFragment on NcmazFaustBlockCta {\n\t\t\trenderedHtml\n\t\t}\n\t": types.NcmazFaustBlockCtaFragmentFragmentDoc,
    "\n    fragment NcmazFaustBlockGroupFragment on NcmazFaustBlockGroup {\n      aliasAttributes: attributes {\n        style\n        variation\n        hasBackground\n        className\n      }\n    }\n  ": types.NcmazFaustBlockGroupFragmentFragmentDoc,
    "\n    fragment NcmazFaustBlockMagazineFragment on NcmazFaustBlockMagazine {\n      attributes {\n        blockVariation\n        className\n        hasBackground\n      }\n    }\n  ": types.NcmazFaustBlockMagazineFragmentFragmentDoc,
    "\n    fragment NcmazFaustBlockTermsFragment on NcmazFaustBlockTerms {\n      attributes {\n        blockVariation\n        hasBackground\n      }\n    }\n  ": types.NcmazFaustBlockTermsFragmentFragmentDoc,
    "\n query PageArchiveGetArchive($uri: String! = \"\", $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n  nodeByUri(uri: $uri) {\n      uri\n      id\n      ... on PostFormat {\n        ...NcmazFcPostFormatFullFieldsFragment\n      }\n    }\n     # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }": types.PageArchiveGetArchiveDocument,
    "\nquery PageCategoryGetCategory($id: ID!, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!)  {\n    category(id: $id) {\n       ...NcmazFcCategoryFullFieldsFragment\n       posts(first: 9, where: {orderby: {field: DATE, order: DESC}}) {\n         nodes {\n           ...ChildCategoryPosts\n         }\n       }\n    }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 40) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n }": types.PageCategoryGetCategoryDocument,
    "\n  query GetPage($databaseId: ID!, $asPreview: Boolean = false, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      featuredImage {\n        node {\n          altText\n          sourceUrl\n        }\n      }\n    }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 40) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n": types.GetPageDocument,
    "\n  query GetPostSiglePage($databaseId: ID!,$asPreview: Boolean = false, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n    ...NcmazFcPostFullFields\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: {location:$headerLocation}, first: 15) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: {location:$footerLocation}, first: 20) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n": types.GetPostSiglePageDocument,
    "\n query PageTagGetTag($id: ID!, $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    tag(id: $id) {\n       ...NcmazFcTagFullFieldsFragment\n      \n      posts(first: $first, where: {orderby: {field: DATE, order: DESC}}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n     # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }": types.PageTagGetTagDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\t\t#graphql\n\t\tquery SearchFormQueryGetPostsBySearch(\n\t\t\t$search: String\n\t\t) {\n\t\t\tcategories(first: 10, where: { search: $search }) {\n\t\t\t\tnodes {\n\t\t\t\t\tname\n\t\t\t\t\turi\n\t\t\t\t}\n\t\t\t\tpageInfo {\n\t\t\t\t\tendCursor\n\t\t\t\t\thasNextPage\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t"): (typeof documents)["\n\t\t#graphql\n\t\tquery SearchFormQueryGetPostsBySearch(\n\t\t\t$search: String\n\t\t) {\n\t\t\tcategories(first: 10, where: { search: $search }) {\n\t\t\t\tnodes {\n\t\t\t\t\tname\n\t\t\t\t\turi\n\t\t\t\t}\n\t\t\t\tpageInfo {\n\t\t\t\t\tendCursor\n\t\t\t\t\thasNextPage\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMenuSideBar {\n    sidebarMenuItems: menuItems(where: { location: MAIN_MENU }, first: 40) {\n      nodes {\n        ...NcSideBarMenuFieldsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMenuSideBar {\n    sidebarMenuItems: menuItems(where: { location: MAIN_MENU }, first: 40) {\n      nodes {\n        ...NcSideBarMenuFieldsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation myMutationUpdatePostToPublishOrPending($id: ID = \"\", $status: PostStatusEnum ) {\n      updatePost(input: {id: $id, status: $status}) {\n        clientMutationId\n      }\n    }"): (typeof documents)["mutation myMutationUpdatePostToPublishOrPending($id: ID = \"\", $status: PostStatusEnum ) {\n      updatePost(input: {id: $id, status: $status}) {\n        clientMutationId\n      }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TestQuery {\n    generalSettings {\n      title\n      description\n    }\n  }\n"): (typeof documents)["\n  query TestQuery {\n    generalSettings {\n      title\n      description\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcgeneralSettingsFieldsFragment on GeneralSettings {\n      __typename\n      description\n      title\n\t}\n"): (typeof documents)["\n\tfragment NcgeneralSettingsFieldsFragment on GeneralSettings {\n      __typename\n      description\n      title\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcmazFcTagShortFieldsFragment on Tag {\n\t\t__typename\n\t\tname\n\t\turi\n\t\tdatabaseId\n\t\tcount\n\t}\n"): (typeof documents)["\n\tfragment NcmazFcTagShortFieldsFragment on Tag {\n\t\t__typename\n\t\tname\n\t\turi\n\t\tdatabaseId\n\t\tcount\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcmazFcTagFullFieldsFragment on Tag {\n\t\t...NcmazFcTagShortFieldsFragment\n\t\tdescription\n\t\tcount\n\t}\n"): (typeof documents)["\n\tfragment NcmazFcTagFullFieldsFragment on Tag {\n\t\t...NcmazFcTagShortFieldsFragment\n\t\tdescription\n\t\tcount\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcmazFcCategoryFullFieldsFragment on Category {\n\t  __typename\n\t  id\n\t  databaseId\n\t  description\n\t  name\n\t  uri\n\t  count\n\t  seo {\n\t\t\tmetaDesc\n\t\t\tmetaKeywords\n\t\t\ttitle\n\t  }\n\t  ancestors {\n\t \tnodes {\n\t\t\tid\n\t\t\tname\n\t\t\turi\n\t\t}\n\t  }\n\t  children {\n\t\tnodes {\n\t\t\tname\n\t\t\turi\n\t\t\t... on Category {\n\t\t\t\tposts (first: 6) {\n\t\t\t\t\tnodes {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\turi\n\t\t\t\t\t\tfeaturedImage {\n\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\tsourceUrl\n\t\t\t\t\t\t\t\taltText\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n      }\n\t  ncTaxonomyMeta {\n\t\tcolor\n\t\tfeaturedImage {\n\t\t  node {\n\t\t\t...NcmazFcImageFields\n\t\t  }\n\t\t}\n\t  }\n\t}\n  "): (typeof documents)["\n\tfragment NcmazFcCategoryFullFieldsFragment on Category {\n\t  __typename\n\t  id\n\t  databaseId\n\t  description\n\t  name\n\t  uri\n\t  count\n\t  seo {\n\t\t\tmetaDesc\n\t\t\tmetaKeywords\n\t\t\ttitle\n\t  }\n\t  ancestors {\n\t \tnodes {\n\t\t\tid\n\t\t\tname\n\t\t\turi\n\t\t}\n\t  }\n\t  children {\n\t\tnodes {\n\t\t\tname\n\t\t\turi\n\t\t\t... on Category {\n\t\t\t\tposts (first: 6) {\n\t\t\t\t\tnodes {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\turi\n\t\t\t\t\t\tfeaturedImage {\n\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\tsourceUrl\n\t\t\t\t\t\t\t\taltText\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n      }\n\t  ncTaxonomyMeta {\n\t\tcolor\n\t\tfeaturedImage {\n\t\t  node {\n\t\t\t...NcmazFcImageFields\n\t\t  }\n\t\t}\n\t  }\n\t}\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcmazFcCategoryCardFieldsNotImage on Category {\n\t\t__typename\n\t\tname\n\t\turi\n\t\tcount\n\t\tdatabaseId\n\t\tparentDatabaseId\n\t\tposts (first: 10) {\n\t\t\tnodes {\n\t\t\t\t...GetPostFields\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tfragment NcmazFcCategoryCardFieldsNotImage on Category {\n\t\t__typename\n\t\tname\n\t\turi\n\t\tcount\n\t\tdatabaseId\n\t\tparentDatabaseId\n\t\tposts (first: 10) {\n\t\t\tnodes {\n\t\t\t\t...GetPostFields\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment GetPostFields on Post {\n\t\ttitle\n\t\turi\n\t\tdate\n\t\tcontent\n\t\tauthor {\n\t\t\tnode {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t}\n\t\t}\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\t...NcmazFcImageHasDetailFields\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tfragment GetPostFields on Post {\n\t\ttitle\n\t\turi\n\t\tdate\n\t\tcontent\n\t\tauthor {\n\t\t\tnode {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t}\n\t\t}\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\t...NcmazFcImageHasDetailFields\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcmazFcPostFormatShortFieldsFragment on PostFormat {\n\t\t__typename\n\t\tname\n\t\turi\n\t\tdatabaseId\n\t\tcount\n\t}\n"): (typeof documents)["\n\tfragment NcmazFcPostFormatShortFieldsFragment on PostFormat {\n\t\t__typename\n\t\tname\n\t\turi\n\t\tdatabaseId\n\t\tcount\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcmazFcPostFormatFullFieldsFragment on PostFormat {\n\t\t...NcmazFcPostFormatShortFieldsFragment\n\t\tdescription\n\t\tcount\n\t}\n"): (typeof documents)["\n\tfragment NcmazFcPostFormatFullFieldsFragment on PostFormat {\n\t\t...NcmazFcPostFormatShortFieldsFragment\n\t\tdescription\n\t\tcount\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcmazFcPostFullFields on Post {\n\t\t__typename\n\t\turi\n\t\tdate\n\t\tstatus\n\t\texcerpt\n\t\tdatabaseId\n\t\ttitle\n\t\tamazonShortcode {\n\t\t\tamazonShortcode\n\t\t}\n\t\tnumberOfToplist {\n\t\t\tnumberOfToplist\n\t\t}\n\t\tcontent\n\t\tseo {\n\t\t\tmetaDesc\n\t\t\tmetaKeywords\n\t\t\ttitle\n\t\t\tmetaRobotsNoindex\n\t\t}\n\t\tauthor {\n\t\t\tnode {\n\t\t\t\tdescription\n\t\t\t\t...NcmazFcUserShortForPostCardFragment\n\t\t\t}\n\t\t}\n\t\tcategories {\n\t\t\tnodes {\n\t\t\t\t...NcmazFcCategoryCardFieldsNotImage\n\t\t\t}\n\t\t}\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\t...NcmazFcImageHasDetailFields\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tfragment NcmazFcPostFullFields on Post {\n\t\t__typename\n\t\turi\n\t\tdate\n\t\tstatus\n\t\texcerpt\n\t\tdatabaseId\n\t\ttitle\n\t\tamazonShortcode {\n\t\t\tamazonShortcode\n\t\t}\n\t\tnumberOfToplist {\n\t\t\tnumberOfToplist\n\t\t}\n\t\tcontent\n\t\tseo {\n\t\t\tmetaDesc\n\t\t\tmetaKeywords\n\t\t\ttitle\n\t\t\tmetaRobotsNoindex\n\t\t}\n\t\tauthor {\n\t\t\tnode {\n\t\t\t\tdescription\n\t\t\t\t...NcmazFcUserShortForPostCardFragment\n\t\t\t}\n\t\t}\n\t\tcategories {\n\t\t\tnodes {\n\t\t\t\t...NcmazFcCategoryCardFieldsNotImage\n\t\t\t}\n\t\t}\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\t...NcmazFcImageHasDetailFields\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment ChildCategoryPosts on Post {\n\t\ttitle\n\t\turi\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\taltText\n\t\t\t\tsourceUrl\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tfragment ChildCategoryPosts on Post {\n\t\ttitle\n\t\turi\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\taltText\n\t\t\t\tsourceUrl\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcmazFcPostCardFields on Post {\n\t\t...NcmazFcPostCardFieldsNOTNcmazGalleryImgs\n\t}\n"): (typeof documents)["\n\tfragment NcmazFcPostCardFields on Post {\n\t\t...NcmazFcPostCardFieldsNOTNcmazGalleryImgs\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcmazFcPostCardFieldsNOTNcmazGalleryImgs on Post {\n\t\t__typename\n\t\tdatabaseId\n\t\ttitle\n\t\turi\n\t\tstatus\n\t\tmodified\n\t\tdate\n\t\texcerpt\n\t\tauthor {\n\t\t\tnode {\n\t\t\t\t...NcmazFcUserShortForPostCardFragment\n\t\t\t}\n\t\t}\n\t\tcategories {\n\t\t\tnodes {\n\t\t\t\t...NcmazFcCategoryCardFieldsNotImage\n\t\t\t}\n\t\t}\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\t...NcmazFcImageFields\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tfragment NcmazFcPostCardFieldsNOTNcmazGalleryImgs on Post {\n\t\t__typename\n\t\tdatabaseId\n\t\ttitle\n\t\turi\n\t\tstatus\n\t\tmodified\n\t\tdate\n\t\texcerpt\n\t\tauthor {\n\t\t\tnode {\n\t\t\t\t...NcmazFcUserShortForPostCardFragment\n\t\t\t}\n\t\t}\n\t\tcategories {\n\t\t\tnodes {\n\t\t\t\t...NcmazFcCategoryCardFieldsNotImage\n\t\t\t}\n\t\t}\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\t...NcmazFcImageFields\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment PostCardFieldsNOTNcmazMEDIA on Post {\n\t\t__typename\n\t\tdatabaseId\n\t\ttitle\n\t\turi\n\t\tstatus\n\t\tmodified\n\t\tdate\n\t\texcerpt\n\t\tauthor {\n\t\t\tnode {\n\t\t\t\t...NcmazFcUserShortForPostCardFragment\n\t\t\t}\n\t\t}\n\t\tcategories {\n\t\t\tnodes {\n\t\t\t\t...NcmazFcCategoryCardFieldsNotImage\n\t\t\t}\n\t\t}\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\t...NcmazFcImageFields\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tfragment PostCardFieldsNOTNcmazMEDIA on Post {\n\t\t__typename\n\t\tdatabaseId\n\t\ttitle\n\t\turi\n\t\tstatus\n\t\tmodified\n\t\tdate\n\t\texcerpt\n\t\tauthor {\n\t\t\tnode {\n\t\t\t\t...NcmazFcUserShortForPostCardFragment\n\t\t\t}\n\t\t}\n\t\tcategories {\n\t\t\tnodes {\n\t\t\t\t...NcmazFcCategoryCardFieldsNotImage\n\t\t\t}\n\t\t}\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\t...NcmazFcImageFields\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcmazFcImageFields on MediaItem {\n\t\t__typename\n\t\taltText\n\t\tdatabaseId\n\t\tsourceUrl\n\t}\n"): (typeof documents)["\n\tfragment NcmazFcImageFields on MediaItem {\n\t\t__typename\n\t\taltText\n\t\tdatabaseId\n\t\tsourceUrl\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcmazFcImageHasDetailFields on MediaItem {\n\t\t__typename\n\t\taltText\n\t\tdatabaseId\n\t\tsourceUrl\n\t}\n"): (typeof documents)["\n\tfragment NcmazFcImageHasDetailFields on MediaItem {\n\t\t__typename\n\t\taltText\n\t\tdatabaseId\n\t\tsourceUrl\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcmazFcPostMetaFields on NcPostMetaData {\n\t\t__typename\n\t\tviewsCount\n\t\treadingTime\n\t\tlikesCount\n\t}\n"): (typeof documents)["\n\tfragment NcmazFcPostMetaFields on NcPostMetaData {\n\t\t__typename\n\t\tviewsCount\n\t\treadingTime\n\t\tlikesCount\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcmazFcPostMetaFullFields on NcPostMetaData {\n\t\t__typename\n\t\tviewsCount\n\t\treadingTime\n\t\tlikesCount\n\t\tsavedsCount\n\t\tshowRightSidebar\n\t\ttemplate\n\t}\n"): (typeof documents)["\n\tfragment NcmazFcPostMetaFullFields on NcPostMetaData {\n\t\t__typename\n\t\tviewsCount\n\t\treadingTime\n\t\tlikesCount\n\t\tsavedsCount\n\t\tshowRightSidebar\n\t\ttemplate\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcmazFcUserShortForPostCardFragment on User {\n\t\tdatabaseId\n\t\turi\n\t\tusername\n\t\tname\n\t\tncUserMeta {\n\t\t\tcolor\n\t\t\tfacebookUrl\n\t\t\tinstagramUrl\n\t\t\tlinkedinUrl\n\t\t\tncBio\n\t\t\tpinterestUrl\n\t\t\ttwitterUrl\n\t\t\tyoutubeUrl\n\t\t\ttiktokUrl\n\t\t\tfeaturedImage {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t\tbackgroundImage {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdescription\n\t\texpert {\n\t\t\tareasOfExpertise\n\t\t}\n\t}\n"): (typeof documents)["\n\tfragment NcmazFcUserShortForPostCardFragment on User {\n\t\tdatabaseId\n\t\turi\n\t\tusername\n\t\tname\n\t\tncUserMeta {\n\t\t\tcolor\n\t\t\tfacebookUrl\n\t\t\tinstagramUrl\n\t\t\tlinkedinUrl\n\t\t\tncBio\n\t\t\tpinterestUrl\n\t\t\ttwitterUrl\n\t\t\tyoutubeUrl\n\t\t\ttiktokUrl\n\t\t\tfeaturedImage {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t\tbackgroundImage {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdescription\n\t\texpert {\n\t\t\tareasOfExpertise\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tfragment NcmazFcUserFullFields on User {\n\t\tid\n\t\tdatabaseId\n\t\turi\n\t\tusername\n\t\tname\n\t\tdescription\n\t\texpert {\n\t\t\tareasOfExpertise\n\t\t}\n\t\tncUserMeta {\n\t\t\tcolor\n\t\t\tfacebookUrl\n\t\t\tgithubUrl\n\t\t\tlinkedinUrl\n\t\t\tncBio\n\t\t\tpinterestUrl\n\t\t\ttwitterUrl\n\t\t\tyoutubeUrl\n\t\t\ttiktokUrl\n\t\t\tfeaturedImage {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t\tbackgroundImage {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tfragment NcmazFcUserFullFields on User {\n\t\tid\n\t\tdatabaseId\n\t\turi\n\t\tusername\n\t\tname\n\t\tdescription\n\t\texpert {\n\t\t\tareasOfExpertise\n\t\t}\n\t\tncUserMeta {\n\t\t\tcolor\n\t\t\tfacebookUrl\n\t\t\tgithubUrl\n\t\t\tlinkedinUrl\n\t\t\tncBio\n\t\t\tpinterestUrl\n\t\t\ttwitterUrl\n\t\t\tyoutubeUrl\n\t\t\ttiktokUrl\n\t\t\tfeaturedImage {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t\tbackgroundImage {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment NcPrimaryMenuFieldsFragment on MenuItem {  \n        id  \n        uri\n        path  \n        label\n        parentId\n        databaseId\n    }\n"): (typeof documents)["\n    fragment NcPrimaryMenuFieldsFragment on MenuItem {  \n        id  \n        uri\n        path  \n        label\n        parentId\n        databaseId\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nfragment NcFooterMenuFieldsFragment on MenuItem {\n      databaseId\n      uri\n      label\n      parentId\n      databaseId\n      id\n}\n"): (typeof documents)["\nfragment NcFooterMenuFieldsFragment on MenuItem {\n      databaseId\n      uri\n      label\n      parentId\n      databaseId\n      id\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment NcSideBarMenuFieldsFragment on MenuItem {\n          databaseId\n          uri\n          label\n          parentId\n          databaseId\n          id\n    }\n"): (typeof documents)["\n    fragment NcSideBarMenuFieldsFragment on MenuItem {\n          databaseId\n          uri\n          label\n          parentId\n          databaseId\n          id\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment NcCategoryFieldsFragment on MenuItem {\n          databaseId\n          uri\n          label\n          parentId\n          databaseId\n          id\n          menuAddons {\n            menuIcon\n            trending\n          }\n    }\n"): (typeof documents)["\n    fragment NcCategoryFieldsFragment on MenuItem {\n          databaseId\n          uri\n          label\n          parentId\n          databaseId\n          id\n          menuAddons {\n            menuIcon\n            trending\n          }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "#graphql\n  query MyQueryGetCMSUser($id: ID!) {\n    user(id: $id, idType: DATABASE_ID) {\n      databaseId\n      ncUserMeta {\n        ncBio\n        featuredImage {\n            node {\n              ...NcmazFcImageFields\n            }\n          }\n      }\n    }\n  }\n"): (typeof documents)["#graphql\n  query MyQueryGetCMSUser($id: ID!) {\n    user(id: $id, idType: DATABASE_ID) {\n      databaseId\n      ncUserMeta {\n        ncBio\n        featuredImage {\n            node {\n              ...NcmazFcImageFields\n            }\n          }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query QueryGetPostsBy(\n    $in: [ID] = null\n    $first: Int = 20\n    $after: String = null\n    $author: Int = null\n    $categoryId: Int = null\n    $categoryName: String = null\n    $tagId: String = null\n    $day: Int = null\n    $month: Int = null\n    $year: Int = null\n    $search: String = \"\"\n    $field: PostObjectsConnectionOrderbyEnum = DATE\n    $order: OrderEnum = DESC\n  ) {\n    posts(\n      first: $first\n      after: $after\n      where: {\n        in: $in\n        author: $author\n        categoryId: $categoryId\n        categoryName: $categoryName\n        tagId: $tagId\n        dateQuery: { day: $day, month: $month, year: $year }\n        search: $search\n        orderby: { field: $field, order: $order }\n      }\n    ) {\n      nodes {\n        ...NcmazFcPostCardFields\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query QueryGetPostsBy(\n    $in: [ID] = null\n    $first: Int = 20\n    $after: String = null\n    $author: Int = null\n    $categoryId: Int = null\n    $categoryName: String = null\n    $tagId: String = null\n    $day: Int = null\n    $month: Int = null\n    $year: Int = null\n    $search: String = \"\"\n    $field: PostObjectsConnectionOrderbyEnum = DATE\n    $order: OrderEnum = DESC\n  ) {\n    posts(\n      first: $first\n      after: $after\n      where: {\n        in: $in\n        author: $author\n        categoryId: $categoryId\n        categoryName: $categoryName\n        tagId: $tagId\n        dateQuery: { day: $day, month: $month, year: $year }\n        search: $search\n        orderby: { field: $field, order: $order }\n      }\n    ) {\n      nodes {\n        ...NcmazFcPostCardFields\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query QueryGet10Categories($first: Int = 10) {\n    categories(first: $first, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query QueryGet10Categories($first: Int = 10) {\n    categories(first: $first, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query QueryGetCategories($after: String, $first: Int = 10) {\n    categories(first: $first, after: $after) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query QueryGetCategories($after: String, $first: Int = 10) {\n    categories(first: $first, after: $after) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query QueryGetTags($after: String = \"\", $first: Int = 5) {\n    tags(first: $first, after: $after) {\n      nodes {\n        __typename\n        ...NcmazFcTagShortFieldsFragment\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query QueryGetTags($after: String = \"\", $first: Int = 5) {\n    tags(first: $first, after: $after) {\n      nodes {\n        __typename\n        ...NcmazFcTagShortFieldsFragment\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetReadingListData($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location: $headerLocation }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # thêm truy vấn để lấy danh mục cha\n    categories(where: { parent: null }, first: 50) {\n      nodes {\n        id\n        name\n        slug\n        ... on Category {\n          children {\n            nodes {\n              id\n              name\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetReadingListData($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location: $headerLocation }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # thêm truy vấn để lấy danh mục cha\n    categories(where: { parent: null }, first: 50) {\n      nodes {\n        id\n        name\n        slug\n        ... on Category {\n          children {\n            nodes {\n              id\n              name\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetReadingListPage($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location: $headerLocation }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetReadingListPage($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location: $headerLocation }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAuthorWithPosts($id: ID!, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    user(id: $id, idType: SLUG) {\n      ...NcmazFcUserFullFields\n      posts(first:  12, where: {orderby: {field: DATE, order: DESC}}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n      }\n    }\n    # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 15) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 20) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }\n"): (typeof documents)["\n  query GetAuthorWithPosts($id: ID!, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    user(id: $id, idType: SLUG) {\n      ...NcmazFcUserFullFields\n      posts(first:  12, where: {orderby: {field: DATE, order: DESC}}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n      }\n    }\n    # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 15) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 20) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetReadingListData($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n      # common query for all page \n      generalSettings {\n        ...NcgeneralSettingsFieldsFragment\n      }\n      primaryMenuItems: menuItems(where: { location: $headerLocation }, first: 80) {\n        nodes {\n          ...NcPrimaryMenuFieldsFragment\n        }\n      }\n      footerMenuItems: menuItems(where: { location: $footerLocation }, first: 50) {\n        nodes {\n          ...NcFooterMenuFieldsFragment\n        }\n      }\n      # thêm truy vấn để lấy danh mục cha\n      categories(where: { parent: null }, first: 50) {\n        nodes {\n          id\n          name\n          slug\n          ... on Category {\n            children {\n              nodes {\n                id\n                name\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetReadingListData($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n      # common query for all page \n      generalSettings {\n        ...NcgeneralSettingsFieldsFragment\n      }\n      primaryMenuItems: menuItems(where: { location: $headerLocation }, first: 80) {\n        nodes {\n          ...NcPrimaryMenuFieldsFragment\n        }\n      }\n      footerMenuItems: menuItems(where: { location: $footerLocation }, first: 50) {\n        nodes {\n          ...NcFooterMenuFieldsFragment\n        }\n      }\n      # thêm truy vấn để lấy danh mục cha\n      categories(where: { parent: null }, first: 50) {\n        nodes {\n          id\n          name\n          slug\n          ... on Category {\n            children {\n              nodes {\n                id\n                name\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCategories {\n    categoryItems: menuItems(where: { location: CATEGORIES }, first: 200) {\n      nodes {\n        ...NcCategoryFieldsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCategories {\n    categoryItems: menuItems(where: { location: CATEGORIES }, first: 200) {\n      nodes {\n        ...NcCategoryFieldsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetReadingListData($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location: $headerLocation }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    categories(where: { parent: null }, first: 50) {\n      nodes {\n        id\n        name\n        slug\n        ... on Category {\n          children {\n            nodes {\n              id\n              name\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetReadingListData($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location: $headerLocation }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    categories(where: { parent: null }, first: 50) {\n      nodes {\n        id\n        name\n        slug\n        ... on Category {\n          children {\n            nodes {\n              id\n              name\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetReadingListPage($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetReadingListPage($headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchPostsBySearch($search: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    posts(first: 10, where: {search: $search}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n      categories(first: 10, where: { search: $search, orderby: COUNT, order: DESC }) {\n    nodes {\n      ...NcmazFcCategoryFullFieldsFragment\n    }\n  }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 80) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n"): (typeof documents)["\n  query SearchPostsBySearch($search: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    posts(first: 10, where: {search: $search}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n      categories(first: 10, where: { search: $search, orderby: COUNT, order: DESC }) {\n    nodes {\n      ...NcmazFcCategoryFullFieldsFragment\n    }\n  }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 80) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: " \n      query queryGetUsersBySearchOnSearchPage(\n        $first: Int\n        $search: String\n        $after: String\n      ) {\n        users(first: $first, after: $after, where: { search: $search }) {\n          nodes {\n            ...NcmazFcUserFullFields\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    "): (typeof documents)[" \n      query queryGetUsersBySearchOnSearchPage(\n        $first: Int\n        $search: String\n        $after: String\n      ) {\n        users(first: $first, after: $after, where: { search: $search }) {\n          nodes {\n            ...NcmazFcUserFullFields\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchPageQueryGetUsersBySearch ( $first: Int,  $search: String = \"\", $after: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum! )  {\n    users(first: $first, after: $after, where: {search: $search}) {\n        nodes {\n             ...NcmazFcUserFullFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n   # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n"): (typeof documents)["\n  query SearchPageQueryGetUsersBySearch ( $first: Int,  $search: String = \"\", $after: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum! )  {\n    users(first: $first, after: $after, where: {search: $search}) {\n        nodes {\n             ...NcmazFcUserFullFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n   # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: " \n      query queryGetCategoriesBySearchOnSearchPage(\n        $first: Int\n        $search: String = \"\"\n        $after: String\n      ) {\n        categories(first: $first, after: $after, where: { search: $search}) {\n          nodes {\n            ...NcmazFcCategoryFullFieldsFragment\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    "): (typeof documents)[" \n      query queryGetCategoriesBySearchOnSearchPage(\n        $first: Int\n        $search: String = \"\"\n        $after: String\n      ) {\n        categories(first: $first, after: $after, where: { search: $search}) {\n          nodes {\n            ...NcmazFcCategoryFullFieldsFragment\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchPageQueryGetCategoriesBySearch ( $first: Int,  $search: String = \"\", $after: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum! )  {\n    categories (first: $first, after: $after, where: {search: $search, }) {\n        nodes {\n             ...NcmazFcCategoryFullFieldsFragment\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n    }\n   \n   # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n"): (typeof documents)["\n  query SearchPageQueryGetCategoriesBySearch ( $first: Int,  $search: String = \"\", $after: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum! )  {\n    categories (first: $first, after: $after, where: {search: $search, }) {\n        nodes {\n             ...NcmazFcCategoryFullFieldsFragment\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n    }\n   \n   # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchPageQueryGetPostsBySearch( $first: Int,  $search: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    posts(first: $first, where: {search: $search}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n      categories(first:10, where: { orderby: COUNT, order: DESC }) {\n        nodes {\n          ...NcmazFcCategoryFullFieldsFragment\n        }\n      }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 80) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n"): (typeof documents)["\n  query SearchPageQueryGetPostsBySearch( $first: Int,  $search: String, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    posts(first: $first, where: {search: $search}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n      categories(first:10, where: { orderby: COUNT, order: DESC }) {\n        nodes {\n          ...NcmazFcCategoryFullFieldsFragment\n        }\n      }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 80) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tquery SitemapQuery2($after: String) {\n\t\tcontentNodes(\n\t\t\twhere: { contentTypes: [POST] }\n\t\t\tfirst: 50\n\t\t\tafter: $after\n\t\t) {\n\t\t\tpageInfo {\n\t\t\t\thasNextPage\n\t\t\t\tendCursor\n\t\t\t}\n\t\t\tnodes {\n\t\t\t\turi\n\t\t\t\tmodifiedGmt\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery SitemapQuery2($after: String) {\n\t\tcontentNodes(\n\t\t\twhere: { contentTypes: [POST] }\n\t\t\tfirst: 50\n\t\t\tafter: $after\n\t\t) {\n\t\t\tpageInfo {\n\t\t\t\thasNextPage\n\t\t\t\tendCursor\n\t\t\t}\n\t\t\tnodes {\n\t\t\t\turi\n\t\t\t\tmodifiedGmt\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tquery SitemapQuery($after: String) {\n\t\tcontentNodes(\n\t\t\twhere: { contentTypes: [PAGE] }\n\t\t\tfirst: 50\n\t\t\tafter: $after\n\t\t) {\n\t\t\tpageInfo {\n\t\t\t\thasNextPage\n\t\t\t\tendCursor\n\t\t\t}\n\t\t\tnodes {\n\t\t\t\turi\n\t\t\t\tmodifiedGmt\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery SitemapQuery($after: String) {\n\t\tcontentNodes(\n\t\t\twhere: { contentTypes: [PAGE] }\n\t\t\tfirst: 50\n\t\t\tafter: $after\n\t\t) {\n\t\t\tpageInfo {\n\t\t\t\thasNextPage\n\t\t\t\tendCursor\n\t\t\t}\n\t\t\tnodes {\n\t\t\t\turi\n\t\t\t\tmodifiedGmt\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment CoreColumnFragment on CoreColumn {\n      attributes {\n        style\n        className\n        cssClassName\n      }\n    }\n  "): (typeof documents)["\n    fragment CoreColumnFragment on CoreColumn {\n      attributes {\n        style\n        className\n        cssClassName\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment CoreColumnsFragment on CoreColumns {\n      attributes {\n        style\n        className\n        cssClassName\n      }\n    }\n  "): (typeof documents)["\n    fragment CoreColumnsFragment on CoreColumns {\n      attributes {\n        style\n        className\n        cssClassName\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\t\tfragment NcmazFaustBlockCtaFragment on NcmazFaustBlockCta {\n\t\t\trenderedHtml\n\t\t}\n\t"): (typeof documents)["\n\t\tfragment NcmazFaustBlockCtaFragment on NcmazFaustBlockCta {\n\t\t\trenderedHtml\n\t\t}\n\t"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment NcmazFaustBlockGroupFragment on NcmazFaustBlockGroup {\n      aliasAttributes: attributes {\n        style\n        variation\n        hasBackground\n        className\n      }\n    }\n  "): (typeof documents)["\n    fragment NcmazFaustBlockGroupFragment on NcmazFaustBlockGroup {\n      aliasAttributes: attributes {\n        style\n        variation\n        hasBackground\n        className\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment NcmazFaustBlockMagazineFragment on NcmazFaustBlockMagazine {\n      attributes {\n        blockVariation\n        className\n        hasBackground\n      }\n    }\n  "): (typeof documents)["\n    fragment NcmazFaustBlockMagazineFragment on NcmazFaustBlockMagazine {\n      attributes {\n        blockVariation\n        className\n        hasBackground\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment NcmazFaustBlockTermsFragment on NcmazFaustBlockTerms {\n      attributes {\n        blockVariation\n        hasBackground\n      }\n    }\n  "): (typeof documents)["\n    fragment NcmazFaustBlockTermsFragment on NcmazFaustBlockTerms {\n      attributes {\n        blockVariation\n        hasBackground\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n query PageArchiveGetArchive($uri: String! = \"\", $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n  nodeByUri(uri: $uri) {\n      uri\n      id\n      ... on PostFormat {\n        ...NcmazFcPostFormatFullFieldsFragment\n      }\n    }\n     # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }"): (typeof documents)["\n query PageArchiveGetArchive($uri: String! = \"\", $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n  nodeByUri(uri: $uri) {\n      uri\n      id\n      ... on PostFormat {\n        ...NcmazFcPostFormatFullFieldsFragment\n      }\n    }\n     # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery PageCategoryGetCategory($id: ID!, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!)  {\n    category(id: $id) {\n       ...NcmazFcCategoryFullFieldsFragment\n       posts(first: 9, where: {orderby: {field: DATE, order: DESC}}) {\n         nodes {\n           ...ChildCategoryPosts\n         }\n       }\n    }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 40) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n }"): (typeof documents)["\nquery PageCategoryGetCategory($id: ID!, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!)  {\n    category(id: $id) {\n       ...NcmazFcCategoryFullFieldsFragment\n       posts(first: 9, where: {orderby: {field: DATE, order: DESC}}) {\n         nodes {\n           ...ChildCategoryPosts\n         }\n       }\n    }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 40) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPage($databaseId: ID!, $asPreview: Boolean = false, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      featuredImage {\n        node {\n          altText\n          sourceUrl\n        }\n      }\n    }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 40) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPage($databaseId: ID!, $asPreview: Boolean = false, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      featuredImage {\n        node {\n          altText\n          sourceUrl\n        }\n      }\n    }\n    # common query for all page \n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 40) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPostSiglePage($databaseId: ID!,$asPreview: Boolean = false, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n    ...NcmazFcPostFullFields\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: {location:$headerLocation}, first: 15) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: {location:$footerLocation}, first: 20) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPostSiglePage($databaseId: ID!,$asPreview: Boolean = false, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n    ...NcmazFcPostFullFields\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n    generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: {location:$headerLocation}, first: 15) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: {location:$footerLocation}, first: 20) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n query PageTagGetTag($id: ID!, $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    tag(id: $id) {\n       ...NcmazFcTagFullFieldsFragment\n      \n      posts(first: $first, where: {orderby: {field: DATE, order: DESC}}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n     # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }"): (typeof documents)["\n query PageTagGetTag($id: ID!, $first: Int, $headerLocation: MenuLocationEnum!, $footerLocation: MenuLocationEnum!) {\n    tag(id: $id) {\n       ...NcmazFcTagFullFieldsFragment\n      \n      posts(first: $first, where: {orderby: {field: DATE, order: DESC}}) {\n        nodes {\n          ...NcmazFcPostCardFields\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n    categories(first:10, where: { orderby: COUNT, order: DESC }) {\n      nodes {\n        ...NcmazFcCategoryFullFieldsFragment\n      }\n    }\n     # common query for all page \n   generalSettings {\n      ...NcgeneralSettingsFieldsFragment\n    }\n    primaryMenuItems: menuItems(where: { location:  $headerLocation  }, first: 80) {\n      nodes {\n        ...NcPrimaryMenuFieldsFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location:  $footerLocation  }, first: 50) {\n      nodes {\n        ...NcFooterMenuFieldsFragment\n      }\n    }\n    # end common query for all page\n  }"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;